---
title: "Real-Data Application III: Determinants of Plasma Beta-Carotene Levels"
format:
  html:
    embed-resources: true
    anchor-sections: true
    theme:
     - cosmo
---

# Summary

This Quarto document reproduces all results and figures for the real-world application III (Determinants of Plasma Beta-
Carotene Levels) in the supplementary materials.
**With 3 CPUs this code runs for about 20 minutes.**
The code below is configured to use 3 CPUs but it can be adjusted according to the local machine's available resources.

The document is structured as follows:

* Under [Setup](#Setup), the document properties are set for proper rendering of the results and the dataset is read from disk.
  The user may choose to change the number of CPUs available for the computations.
* Under [Compute estimates](#Compute-estimates), all the estimators are computed using the different CV strategies.
* Under [Results](#Results) all the figures and tables reported in the manuscript are created.

The dataset is obtained from http://lib.stat.cmu.edu/datasets/Plasma_Retinol.
According to the webpage:

> Our interest is in the relationships between the plasma beta-carotene level (betaplasma) and the following 10 covariates: age, smoking status (smokstat), quetelet, vitamin use (vituse), number of calories consumed per day (calories), grams of fat consumed per day (fat), grams of fiber consumed per day (fiber), number of alcoholic drinks consumed per week (alcohol), cholesterol consumed (cholesterol), and dietary beta-carotene consumed (betadiet).

# Setup

The code block allows tailoring the computation to the available resources on the local machine.

```{r}
#| label: user-config
#| include: false
N_CPUS <- 3
```

```{r}
#| label: setup
#| include: false
library(pense)
library(here)
requireNamespace('cli')

dev_pdf <- function (filename, width, height, .path = here("figures", "application-plasmaretinol")) {
  if (!dir.exists(.path)) {
    dir.create(.path, mode = '0755', recursive = TRUE)
  }
  cairo_pdf(file.path(.path, str_remove(basename(filename), coll("-1"))),
            fallback_resolution = 600,
            antialias = 'default',
            width = width,
            height = height)
}

here::i_am("application_III-plasma_retinol.qmd")
knitr::opts_chunk$set(warning = FALSE,
                      error = FALSE,
                      message = FALSE,
                      echo = FALSE,
                      dev = c('png', 'dev_pdf'),
                      fig.ext = c('png', 'pdf'),
                      fig.align = 'center',
                      out.width = '100%',
                      fig.width = 7,
                      fig.height = 3)

source(here("90-compute-utils.R"))
source(here("91-plotting-utils.R"))

par_cluster <- parallel::makePSOCKcluster(N_CPUS)
```

```{r}
#| label: cv-settings
#| include: false
CV_K <- 10
CV_REPL <- 10
EN_ALPHA <- 0.5
PENSE_EXPLORE_IT <- 5
PENSE_BDP <- 0.2
RISCV_MAX_SOLUTIONS <- 50
NLAMBDA <- 50
PENSE_MIN_LAMBDA_RATIO <- 1e-3
```

```{r}
#| label: load-plasma-data
pr <- read.table(here("data/plasma_retinol.txt"), skip = 30, nrows = 315,
                 col.names = c("AGE", "SEX", "SMOKSTAT", "QUETELET",
                               "VITUSE", "CALORIES", "FAT", "FIBER",
                               "ALCOHOL", "CHOLESTEROL", "BETADIET",
                               "RETDIET", "BETAPLASMA", "RETPLASMA"))
pr$SEX <- factor(ifelse(pr$SEX == 1, 'M', 'F'), levels = c('M', 'F'))
pr$SMOKSTAT <- factor(pr$SMOKSTAT > 1, labels = c('1', '>1'))

# The SEX variable doesn't have enough variation
pr_x <- model.matrix(BETAPLASMA ~ SEX * (. - RETPLASMA), data = pr)[, -(1:2)]

# Stratified sampling to ensure some balance of SEX
set.seed(123)
pr_train_indices <- c(sample(which(pr$SEX == 'M'), 30),
                      sample(which(pr$SEX == 'F'), 70))

pr_train_x <- as.matrix(pr_x[pr_train_indices, ])
pr_train_y <- as.double(pr$BETAPLASMA[pr_train_indices])
pr_test_x <- as.matrix(pr_x[-pr_train_indices, ])
pr_test_y <- as.double(pr$BETAPLASMA[-pr_train_indices])
```

# Compute estimates

## Classical EN

```{r}
#| label: plasma-classical
#| cache: true
set.seed(123)
pr_lsen <- replicated_cv_glmnet(x = pr_train_x, 
                                y = pr_train_y,
                                alpha = EN_ALPHA,
                                type.measure = 'mae',
                                nfolds = CV_K,
                                lambda.min.ratio = 1e-3,
                                replications = CV_REPL,
                                nlambda = NLAMBDA)
```

## Individual CV replications

```{r}
#| label: plasma-ind-naive
#| eval: false
#| cache: true

set.seed(1)
pr_ind_naive <- lapply(1:2, \(.) {
  pense_cv(x = pr_train_x,
           y = pr_train_y,
           cv_type = 'naive',
           fold_starts = 'enpy',
           alpha = EN_ALPHA,
           bdp = PENSE_BDP,
           cv_k = CV_K,
           cv_repl = 1,
           nlambda = NLAMBDA,
           lambda_min_ratio = PENSE_MIN_LAMBDA_RATIO,
           max_solutions = 1,
           explore_it = 10,
           cl = par_cluster)
})
```

```{r}
#| label: plasma-ind-ris
#| eval: false
#| cache: true

set.seed(1)

pr_ind_ris <- lapply(1:2, \(.) {
  pense_cv(x = pr_train_x,
           y = pr_train_y,
           cv_type = 'ris',
           fold_starts = 'full',
           alpha = EN_ALPHA,
           bdp = PENSE_BDP,
           cv_k = CV_K,
           cv_repl = 1,
           nlambda = NLAMBDA,
           lambda_min_ratio = PENSE_MIN_LAMBDA_RATIO,
           explore_it = 10,
           max_solutions = RISCV_MAX_SOLUTIONS,
           cl = par_cluster)
})
```



## PENSE with N-CV

```{r}
#| label: plasma-naive
#| cache: true
set.seed(123)
pr_naive_cv <- pense_cv(x = pr_train_x,
                        y = pr_train_y,
                        cv_type = 'naive',
                        fold_starts = 'enpy',
                        alpha = EN_ALPHA,
                        bdp = PENSE_BDP,
                        cv_k = CV_K,
                        cv_repl = CV_REPL,
                        nlambda = NLAMBDA,
                        lambda_min_ratio = PENSE_MIN_LAMBDA_RATIO,
                        max_solutions = 1,
                        explore_it = 10,
                        cl = par_cluster)
```

## PENSE with RIS-CV

```{r}
#| label: plasma-ris
#| cache: true
pr_ris_cv <- pense_cv(x = pr_train_x,
                      y = pr_train_y,
                      cv_type = 'ris',
                      fold_starts = 'both',
                      alpha = EN_ALPHA,
                      bdp = PENSE_BDP,
                      cv_k = CV_K,
                      cv_repl = CV_REPL,
                      nlambda = NLAMBDA,
                      lambda_min_ratio = PENSE_MIN_LAMBDA_RATIO,
                      explore_it = 10,
                      max_solutions = RISCV_MAX_SOLUTIONS,
                      cl = par_cluster)
```

# Results

## Figure S3

```{r}
#| label: plasma-summary-plots
#| fig-height: 2.5
#| fig-width: 7
#| eval: true
#| fig-cap: "Figure S3"

pr_ris_cv <- change_cv_measure(pr_ris_cv, "wrmspe")

pr_lsen_oos_error <- sweep(pr_test_x %*% pr_lsen$glmnet.fit$beta, 2L,  pr_lsen$glmnet.fit$a0, "-") |> 
  abs() |> 
  colMeans()

pr_lsen_cvres <- tibble(cvavg = pr_lsen$cvm,
                        cvse  = pr_lsen$cvsd,
                        oos_error = pr_lsen_oos_error,
                        lambda_index = order(pr_lsen$lambda, decreasing = TRUE),
                        cv_type = "LS-EN",
                        id      = "LS-EN",
                        panel = "Replicated CV") |> 
  mutate(cvsel = pense:::.cv_se_selection(cvavg, cvse, 1)) |> 
  pivot_longer(c(cvavg, oos_error)) |> 
  mutate(cvse = if_else(name == 'oos_error', 0, cvse),
         id = if_else(name == 'oos_error', 'OOS Error', cv_type),
         ymin = value - cvse,
         ymax = value + cvse) |> 
  select(-name, -cvse)

cv_plots <- list(`N-CV`   = pr_naive_cv,
                 `RIS-CV` = pr_ris_cv) |> 
  map(\(x) {
    oos_rmspe <- map2_dbl(x$cvres$lambda_index, x$cvres$solution_index, \(li, si) {
      est <- x$estimates[[li]][[si]]
      mean(abs(pr_test_y - drop(pr_test_x %*% est$beta) - est$intercept))
    })
    x$cvres$oos_error <- oos_rmspe
    x$cvres |> 
      mutate(cvsel = pense:::.cv_se_selection(cvavg, cvse, 1)) |> 
      select(lambda_index, cvsel, cvavg, cvse, oos_error) |> 
      pivot_longer(c(cvavg, oos_error)) |> 
      mutate(cvse  = if_else(name == 'oos_error', 0, cvse))
  }) |> 
  list_rbind(names_to = 'cv_type') |> 
  transmute(cv_type, 
            id = if_else(name == 'oos_error', 'OOS Error', cv_type),
            lambda_index,
            cvsel,
            value = if_else(name == 'cvavg' & cv_type == 'RIS-CV',
                            1.3 * value, value),
            ymin  = value - cvse,
            ymax  = value + cvse) |> 
  mutate(panel = "Replicated CV") |> 
  bind_rows(pr_lsen_cvres) |> 
  mutate(cv_type_lbl = case_match(cv_type,
                                  "N-CV"   ~ 'NaÃ¯ve-CV',
                                  .default = cv_type)) |> 
  group_by(cv_type) |> 
  group_map(.keep = TRUE, \(x, gr) {
    ylbl <- switch(gr$cv_type[[1]],
                   "N-CV"   = expression(paste(tau, "-size of prediction errors")),
                   "LS-EN"   = expression(paste("Mean absolute prediction error")),
                   "RIS-CV" = expression(paste("Weighted RMSPE")))
    
    tag <- switch(gr$cv_type[[1]],
                  "LS-EN"  = "(a)",
                  "N-CV"   = "(b)",
                  "RIS-CV" = "(c)")

    left_margin <- switch(gr$cv_type[[1]],
                          "N-CV"   = 0.4,
                          "RIS-CV" = 0.4,
                          "LS-EN"  = 0.2)
    
    selection <- x |> 
      filter(cvsel == 'se_fact', id != 'OOS Error') |> 
      pull(lambda_index)

    gd <- guide_none()

    x |> 
      mutate(cv_type = if_else(id == 'OOS Error', 'OOS Error', cv_type)) |> 
      ggplot(aes(x = lambda_index, y = value, color = cv_type, group = id)) +
      geom_line(aes(linetype = cv_type), linewidth = 0.5) +
      geom_point(aes(shape = cv_type), size = 2) +
      geom_linerange(aes(ymin = ymin, ymax = ymax)) +
      geom_vline(xintercept = selection, linetype = '22', color = 'black', linewidth = 0.5) +
      scale_x_log10() +
      scale_color_manual(values = c("N-CV"      = COLORPAL[['green']],
                                    "RIS-CV"    = COLORPAL[['blue']],
                                    "LS-EN"     = COLORPAL[['magenta']],
                                    "OOS Error" = COLORPAL[['gray']]),
                         guide = gd) +
      scale_linetype_manual(values = c("N-CV"      = 'solid',
                                       "RIS-CV"    = '42',
                                       "LS-EN"     = '2242',
                                       "OOS Error" = '11'),
                            guide = gd) +
      scale_shape_manual(values = c("N-CV"      = 1, 
                                    "RIS-CV"    = 16,
                                    "LS-EN"     = 18,
                                    "OOS Error" = 22),
                         guide = gd) +
      scale_x_continuous(transform = 'reverse') +
      facet_grid(cols = vars(cv_type_lbl)) +
      labs(x = expression(lambda - "index"),
           y = ylbl,
           tag = tag) +
      coord_cartesian(ylim = c(95, 125)) +
      plottheme() +
      theme(plot.margin = margin(0.2, 0.4, 0.5, left_margin, 'lines'),
            plot.tag.position = "bottom",
            plot.tag = element_text(face = "bold", size = rel(0.8),
                                    margin = margin(5, 0, 0, 0)),
            legend.position = 'inside',
            legend.position.inside = c(0.8, 0.8))
  })


layout <- matrix(nrow = 1, ncol = 100,
                 byrow = TRUE,
                 data = c(rep.int(1, 32), rep.int(2, 34), rep.int(3, 34),
                          rep.int(1, 33), rep.int(2, 36), rep.int(3, 31)))

gridExtra::grid.arrange(grobs = cv_plots, layout_matrix = layout)

```
